#!/usr/bin/python

# Copyright 2020 Kungliga Tekniska h√∂gskolan

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import print_function, unicode_literals

import os
import configparser
import logging
import asyncore
import atexit

# This is https://github.com/systemd/python-systemd a.k.a.
# https://pypi.org/project/systemd-python/
# (not https://pypi.org/project/systemd/)
from systemd.daemon import notify

from lmtpsmsd.socketactivation import get_activation_socket
from lmtpsmsd.smsdevice import SMSDevice
from lmtpsmsd.smsgateway import SMSGateway

def setup_logging(level=None):
    conf = {}
    if level:
        if level == 'DEBUG':
            conf['level'] = logging.DEBUG
        elif level == 'INFO':
            conf['level'] = logging.INFO
        elif level == 'WARNING':
            conf['level'] = logging.WARNING
    logging.basicConfig(**conf)

def lmtpsmsd():
    conf = configparser.ConfigParser()
    conf.read(os.environ["LMTPSMSD_INI"])

    setup_logging(**conf["logging"])

    logger = logging.getLogger("lmtpsmsd")
    
    sock = get_activation_socket()

    sms = SMSDevice(conf["serial"], conf["modem"])
    def disconnect_sms():
        sms.disconnect()
    atexit.register(disconnect_sms)

    app = SMSGateway(sms, sock)

    sms.connect()
    logger.info("accepting connections")
    notify("READY=1")
    while True:
        notify("STATUS=accepting messages")
        asyncore.loop(timeout=60, count=1)
        sms.ping()

if __name__ == '__main__':
    lmtpsmsd()

